I""Z<h4 id="1app运行过程中同时最多有几个线程如何实现的高并发">1.App运行过程中，同时最多有几个线程，如何实现的高并发</h4>
<ul>
  <li>最多有几个线程： 根据cpu的能力，目测：50个，限制活动线程的个数不超过硬件线程的个数。</li>
  <li>Blocked状态的线程个数不在限制内，区分计算密集型和IO密集型线程，计算密集型大部分时间保证runnable状态，IO密集型线程不需要太多；</li>
  <li>基于任务的编程（协程），按需调度、负载均衡、更易编程，阿里开源 iOS 协程开发框架 coobjc；</li>
  <li>协程可以通过 yield 中断执行，转而执行别的协程。在这种转换过程中不存在调用者与被调用者的关系;<a href="https://www.jianshu.com/p/cd7f6ef5a8fd">阿里开源 iOS 协程开发框架 coobjc</a></li>
  <li>协程的线程可以让我们的程序并发的跑，协程可以让并发程序跑得看起来更美好。
<img src="http://files.pandaleo.cn/2a2ab2958e0b976d110a59009ceebfa1.png" alt="" /></li>
</ul>

<h4 id="2atomic-和-nonatomic-区别">2.atomic 和 nonatomic 区别</h4>
<ul>
  <li>用来决定编译器生成的getter和setter是否为原子操作。</li>
  <li>atomic，默认，提供多线程安全,是描述该变量是否支持多线程的同步访问，如果选择了atomic 那么就是说，系统会自动的创建lock锁，锁定变量。</li>
  <li>nonatomic禁止多线程，变量保护，提高性能。</li>
</ul>

<h4 id="3readwritereadonlyassignretaincopynonatomic">3.readwrite，readonly，assign，retain，copy，nonatomic</h4>
<ul>
  <li>readwrite 是可读可写特性;需要生成 getter 方法和 setter 方法时</li>
  <li>readonly 是只读特性 只会生成 getter 方法 不会生成 setter 方
法 ;不希望属性在类外改变</li>
  <li>assign 是赋值特性，setter 方法将传入参数赋值给实例变量;仅设
置变量时;</li>
  <li>retain 表示持有特性，setter 方法将传入参数先保留，再赋值，
传入参数的 retaincount 会+1;</li>
  <li>copy 表示赋值特性， setter 方法将传入对象复制一份;需要完全一
份新的变量时。</li>
  <li>nonatomic 非原子操作，决定编译器生成的 settergetter 是否是原
子操作，atomic 表示多线程安全，一般使用 nonatomic</li>
</ul>

<h4 id="4单例">4.单例</h4>

<ul>
  <li>
    <p>1.单例，一个类只允许有一个实例,在整个程序中需要多次使用,共享同一份资源的时候,就可以创建单例,一般封装成工具类使用,苹果封装成单例常用的有UIApplication,NSUserDefaults,NSNotificationCenter,NSFIleManager等等</p>
  </li>
  <li>2.单例优缺点
    <ul>
      <li>优点: 因为单例模式会使类只有一个实例所以方便使用,并且节省内存资源的分配.因为使用GCD的方式是线程安全的,所避免资源的多重使用</li>
      <li>缺点: 单例创建的内存只有在程序结束时才会被释放. 由于单例不能被继承(因为返回的是同一个实例),所以扩展性很不好</li>
    </ul>
  </li>
  <li>3.应用场景
    <ul>
      <li>1.设置单例类访问应用的配置信息</li>
      <li>2.用户的个人信息登陆后用nsuserdefaults 存储，对登录类进一步采用单例封装方便全局访问</li>
      <li>3.封装一个单例对应用多处对同一本地数据库进行操作</li>
    </ul>
  </li>
</ul>

<h4 id="5消息发送策略">5.消息发送策略</h4>
<p>Objective-C采用消息发送策略，选择器向接收器发送消息，编译阶段无法知道对象是否有对应的方法，运行时根据isa指针，找到对象所属的类结构体，然后结合类中的缓存方法列表指针和虚函数指针找到选择器对应的SEL选择器类型变量，如果找到则SEL变量对应的IMP指针找到方法实现.如果找不到对应的方法，则会启动消息转发机制，如果仍然失败，抛出异常或崩溃.</p>

<h4 id="6wwwdcflutterswift-ui">6.WWWDC，<a href="https://www.jianshu.com/p/ea8f313aa168">Flutter、Swift UI</a></h4>

<h4 id="7加密">7.加密</h4>
<ul>
  <li>加密算法是可逆的，用来对敏感数据进行保护。散列算法(签名算法、哈希算法)是不可逆的，主要用于身份验证。</li>
  <li>对称加密算法使用同一个密匙加密和解密，速度快，适合给大量数据加密。对称加密客户端和服务端使用同一个密匙，存在被抓包破解的风险。</li>
  <li>非对称加密算法使用公钥加密，私钥解密，私钥签名，公钥验签。安全性比对称加密高，但速度较慢。非对称加密使用两个密匙，服务端和客户端密匙不一样，私钥放在服务端，黑客一般是拿不到的，安全性高。</li>
  <li>Base64不是安全领域下的加解密算法，只是一个编码算法，通常用于把二进制数据编码为可写的字符形式的数据，特别适合在http，mime协议下的网络快速传输数据。UTF-8和GBK中文的Base64编码结果是不同的。采用Base64编码不仅比较简短，同时也具有不可读性，即所编码的数据不会被人用肉眼所直接看到，但这种方式很初级，很简单。Base64可以对图片文件进行编码传输。</li>
  <li>https协议广泛用于万维网上安全敏感的通讯，例如交易支付方面。它的主要作用可以分为两种：一种是建立一个信息安全通道，来保证数据传输的安全；另一种就是确认网站的真实性。</li>
  <li>大量数据加密建议采用对称加密算法，提高加解密速度；小量的机密数据，可以采用非对称加密算法。在实际的操作过程中，我们通常采用的方式是：采用非对称加密算法管理对称算法的密钥，然后用对称加密算法加密数据，这样我们就集成了两类加密算法的优点，既实现了加密速度快的优点，又实现了安全方便管理密钥的优点。</li>
  <li>MD5标准密钥长度128位（128位是指二进制位。二进制太长，所以一般都改写成16进制，每一位16进制数可以代替4位二进制数，所以128位二进制数写成16进制就变成了128/4=32位。16位加密就是从32位MD5散列中把中间16位提取出来）；sha1标准密钥长度160位(比MD5摘要长32位)，Base64转换后的字符串理论上将要比原来的长1/3。</li>
</ul>

<h4 id="8三方库汇总">8.<a href="https://github.com/Tim9Liu9/TimLiu-iOS/blob/master/Swift.md">三方库汇总</a></h4>

<h4 id="9method-swizze应用">9.Method Swizze应用</h4>
<p>tableview 占位图</p>
<ul>
  <li>在 load 时添加关联对象，初始化添加占位view，隐藏分割线，有数据显示时隐藏</li>
</ul>

<h4 id="10动画">10.动画</h4>
<h5 id="caanimation">CAAnimation</h5>
<ul>
  <li>CABasicAnimation基础动画，通过设定起始点，终点，时间，动画会沿着你这设定点进行移动。可以看做特殊的CAKeyFrameAnimation</li>
  <li>CAKeyframeAnimation关键帧动画，可定制度比CABasicAnimation高，也是本系列的接下来的内容</li>
  <li>CAAnimationGroup组动画，支持多个CABasicAnimation或者CAKeyframeAnimation动画同时执行</li>
  <li>关键属性：duration、repeatCount、repeatDuration、beginTime、timingFunction、
autoreverses、fromValue、toValue、byValue、fillMode</li>
</ul>

<h5 id="animation-easing">Animation Easing</h5>
<ul>
  <li>kCAMediaTimingFunctionLinear 传这个值，在整个动画时间内动画都是以一个相同的速度来改变。也就是匀速运动。</li>
  <li>kCAMediaTimingFunctionEaseIn 使用该值，动画开始时会较慢，之后动画会加速。</li>
  <li>kCAMediaTimingFunctionEaseOut 使用该值，动画在开始时会较快，之后动画速度减慢。</li>
  <li>kCAMediaTimingFunctionEaseInEaseOut 使用该值，动画在开始和结束时速度较慢，中间时间段内速度较快。</li>
</ul>

<h5 id="animationwithkeypath">animationWithKeyPath</h5>
<p>transform：scale\rotation\cornerRadius\backgroundColor\bounds\position<br />
content\opacity\ContentsRect.size.width</p>

<h5 id="uibezierpath">UIBezierPath</h5>
<ul>
  <li>使用UIBezierPath可以创建基于矢量的路径，CGPathRef数据类型的封装，此类是Core Graphics框架关于路径的封装。使用此类可以定义简单的形状，如椭圆、矩形或者有多个直线和曲线段组成的形状等。</li>
</ul>

<h5 id="cashapelayer">CAShapeLayer</h5>
<ul>
  <li>CAShapeLayer是在其坐标系统内绘制贝塞尔曲线(UIBezierPath)的。因此，使用CAShapeLayer需要与UIBezierPath一起使用。</li>
  <li>UIBezierPath类是对CGPathRef的封装
贝塞尔曲线给CAShapeLayer提供路径，CAShapeLayer在提供的路径中进行渲染。路径会闭环，所以绘制出了Shape。</li>
</ul>

<h4 id="11响应式编程">11.响应式编程</h4>
<ul>
  <li>程序接收输入产生输出。输出就是对输入做了一些事的结果。输入，转换，输出，完成。</li>
  <li>输入是应用动作的全部来源。点击、键盘事件、定时器事件、GPS时间、网络请求响应都算是输入这些事件被传递到应用中，应用将他们以某种方式混合，产生了结果：就是输出。</li>
  <li>输出通常会改变应用的UI。开关状态变化、列表有了新的元素都是UI变化。也有可能让磁盘上某个文件产生变化，或者产生一个API请求，这都是应用的输出。</li>
  <li>但不像传统的输入输出设计，应用的输入输出可以产生很多次。应用打开后，不只是一个简单的 输入→工作→输出 就构成了一个生命周期。应用经常有大量的输入并基于这些输入产生输出。</li>
</ul>

<h4 id="12swift-复习">12.<a href="https://www.jianshu.com/u/70778c46a010">Swift 复习</a></h4>

<h4 id="13性能调优">13.性能调优</h4>
<p><a href="http://www.cocoachina.com/articles/18528">iOS 性能调优,成为一名合格iOS程序员必须掌握的技能</a><br />
<a href="https://www.jianshu.com/p/fe566ec32d28">iOS - 性能优化</a><br />
<a href="https://blog.csdn.net/yangxt/article/details/8173412">iOS性能优化系列</a></p>

<h4 id="14容错fabric-crash-日志实现方式">14.容错，Fabric Crash 日志实现方式</h4>
<p><a href="https://www.jianshu.com/p/05aad21e319e">iOS被开发者遗忘在角落的NSException-其实它很强大</a>
<a href="https://www.jianshu.com/p/1d799703a906">iOS容错:runtime实用篇–和常见崩溃say good-bye!</a></p>

<h4 id="15内存管理">15.内存管理</h4>
<p>内存解决思路</p>
<ul>
  <li>通过 Instruments 来查看 leaks。</li>
  <li>集成 Facebook 开源的 FBRetainCycleDetector，这个工具能够检测指定对象的引用情况，并把所存在的引用循环中各对象和引用在终端进行打印。</li>
  <li>集成 MLeaksFinder，可以自动在 App 运行过程检测到内存泄露的对象并立即提醒，无需打开额外的工具，也无需为了检测内存泄露而一个个场景去重复地操作。</li>
</ul>

<h4 id="16ios-开发者应该掌握些-c-知识">16.<a href="https://www.jianshu.com/p/cba3f9bdbd2e">iOS 开发者应该掌握些 C++ 知识</a></h4>

<h4 id="17腾讯开源的数据库-wcdbc">17.腾讯开源的数据库 WCDB，C++</h4>
<p><a href="https://www.jianshu.com/p/2c3f304f7efd">WCDB使用文档</a>
<a href="https://www.cnblogs.com/demodashi/p/8512729.html">微信开源组件WCDB漫谈及Demo</a><br />
首先在选型上，FMDB的SQL拼接、难以防止的SQL注入；CoreData虽然可以方便ORM，但学习成本高，稳定性堪忧，而且多线程鸡肋；另外基于C语言的sqlite我想用的人也应该不多；除了上述关系型数据库之外然后还有一些其他的Key-Value型数据库，如我用过的Realm，对于ObjC开发者来说，上手倒是没什么难度，但缺点显而易见，需要继承，入侵性强，对于单继承的OC来说这并不理想，而且对于集合类型不完全支持，复杂查询也比较无力。</p>

<h2 id="简历">简历</h2>
<p>项目：</p>
<h4 id="swift-特性官方动态">Swift 特性、官方动态</h4>
<h5 id="swift代码更好写">Swift代码更好写</h5>
<ul>
  <li>类型推断（从此不用在定义时就显示的给出变量类型，编译器可以靠上下文进行推断）</li>
  <li>引入了命名空间，从此不用再import其他文件</li>
  <li>告别MRC，全面使用ARC</li>
  <li>结构体可添加方法、支持拓展、支持协议</li>
  <li>函数支持可选参数，支持多返回值，支持函数入参，为函数式编程提供了强大支持。</li>
  <li>可嵌套可添加方法可传参的枚举</li>
  <li>支持泛型</li>
</ul>

<h5 id="swift更安全">Swift更安全</h5>
<ul>
  <li>Swift提出了可选（Optional）的概念，从此，变量只有存在和不存在两种状态、方法调用因此也只存在调了和没调两种情况，去除了OC对于​nil​指针的种种不确定性。</li>
  <li>类型安全，避免精度问题，不同类型之间的赋值都需要经过类型转换，否则编译器会报错。</li>
</ul>

<h5 id="swift更快">Swift更快</h5>
<p>在与OC的速度对比中，苹果官方声称Swift的速度是OC的1.4倍，也有人用for循环证明Swift速度还没有OC快，这两种实验都有各自的水分。但由于Swift的类型安全，使得它可以使用类似C++虚函数表的方式解决OC运行时发消息慢的问题，很多函数调用都从层层消息变成了取址调用，再加上更强大的编译优化，就有足够的理由让开发者相信Swift的效率。</p>

<h5 id="swift开源">Swift开源</h5>
<ul>
  <li>OC而言，开源了Runtime、CF。</li>
  <li>Swift不光是本身，Swift-Clang、LLVM、LLDB等都是开源的。</li>
</ul>

<h5 id="swift跨平台">Swift跨平台</h5>
<p>Swift除了可以基于苹果系统和Linux开发以为还可以进行服务端开发，很多服务端框架支持了</p>

<h4 id="trasition-转场自定义动画">Trasition 转场、自定义动画</h4>
<h5 id="transition代理transition-delegate">Transition代理(Transition Delegate)</h5>
<ul>
  <li>UINavigationController 的 delegate 属性遵守该协议。</li>
  <li>UITabBarController 的 delegate 属性遵守该协议。</li>
  <li>UIViewController 的 transitioningDelegate 属性遵守该协议。（iOS7新增的）</li>
</ul>

<h5 id="动画控制器animation-controller">动画控制器（Animation Controller）</h5>
<p>负责添加视图与及执行动画：遵守<UIViewControllerAnimatedTransitioning>协议</UIViewControllerAnimatedTransitioning></p>
<h5 id="交互控制器interaction-controller">交互控制器（Interaction Controller）</h5>
<p>通过交互手段，来控制动画，遵守<UIViewControllerInteractiveTransitioning>协议；</UIViewControllerInteractiveTransitioning></p>
<h5 id="transition-上下文transition-context">Transition 上下文（Transition Context）</h5>
<p>提供Transition过程中需要的数据；遵守<UIViewControllerContextTransitioning>协议；</UIViewControllerContextTransitioning></p>
<h5 id="transition-协调器transition-coordinator">Transition 协调器(Transition Coordinator)</h5>
<p>可以在Transition动画发生的同时执行其他动画；遵守<UIViewControllerTransitionCoordinator>协议，在IOS7中新增了方法transitionCoordinator()返回一个遵守协议的对象，并且该方法只在控制器Transition 的过程中才返回一个类对象；否则返回nil</UIViewControllerTransitionCoordinator></p>

<h4 id="打包工具-carthage-和-cocoapods">打包工具 Carthage 和 Cocoapods</h4>

<ul>
  <li>使用了CocoaPods的项目是高度集成的，而Carthage更灵活强调尽可能将任务委托给Xcode和Git。
    <ul>
      <li>CocoaPods在使用中会自动创建和更新workspace、依赖和Pod项目并进行整合;</li>
      <li>Carthage在使用中不需要创建和集成相应的workspace和project,只需要依赖打包好的framework文件即可。</li>
      <li>总结一下，CocoaPods的方法更容易使用，而Carthage更灵活且对项目没有侵入性。</li>
    </ul>
  </li>
  <li>CocoaPods相对来说功能要比Carthage多很多，因此也更复杂,而CocoaPods配置简单项目干净。</li>
  <li>CocoaPods有一个中心仓库，而Carthage是去中心化的，没有中心服务器也就避免了可能因中心节点错误而带来的失败，即Carthage每次配置和更新环境，只会去更新具体的库，时间更快。</li>
  <li>想让自己的第三方库支持Carthage比让其支持CocoaPods更加的简单。</li>
</ul>

<h4 id="编译器过程和-xcworkspace-路径引用"><a href="https://www.jianshu.com/p/5b2cce762106">编译器过程和 xcworkspace 路径引用</a></h4>

<p>技能：</p>
<ul>
  <li>擅长 Feed 流性能优化，理解 UI 从创建到渲染到屏幕上的整体流程、机制</li>
  <li>掌握 MVC、MVVM 等主流框架，熟悉桥接、命令、适配器等常见设计模式</li>
  <li>精通 Objective-C、Swift 语言，熟悉 Java、小程序开发，可以看懂 C、C++ 擅长敏捷开发流程，Design Reviewer，Code Reviewer</li>
  <li>能通过 iOS 内存管理、多线程、底层网络、Runtime 技术等解决 iOS 开发过程中的疑难杂症</li>
  <li>熟悉 App 内存占用、耗电、网络、UI 渲染等性能方面分析和优化的方法</li>
</ul>

<h4 id="腾讯一面经">腾讯一面经</h4>
<ul>
  <li>应用大于原理，日常多搜集积累应用细节，尽量针对部门尽量全面覆盖知识点；</li>
  <li>简历每一句话都要深思熟虑，形成完整的知识链，主导面试官。</li>
</ul>

<ol>
  <li><a href="https://www.jianshu.com/p/a047176d9d65?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">对OAuth的理解；</a></li>
  <li>HTTPs、tcp、udp，各种区别和安全机制，加密方式，结合项目应用</li>
  <li>https如何避免中间人劫持，https本身是如何防范的</li>
  <li>卡顿检测、内存监控</li>
  <li>安装包瘦身</li>
  <li>App启动，main函数和didlauch之间做了什么</li>
  <li>项目如何做的业务分层，对设计模式的应用</li>
  <li>Swift为何快、Storyboard，优点在哪里</li>
</ol>

<h4 id="1-常用加密方式">1. 常用加密方式</h4>
<ul>
  <li>1、对称加密算法<br />
对称加密算法的特点是加密密钥和解密密钥是同一把密钥K，且加解密速度快，典型的对称加密算法有DES、AES等。</li>
  <li>2、非对称加密算法<br />
非对称加密算法的特点是加密密钥K1和解密密钥K2是不一样的，他们是一对可互为加解密的密钥，一个可以公开，叫公钥；一个自己保留，不能让其他人知道，叫私钥。这样就能比较好的解决信息传递的安全性，相对来说加解密速度较慢，典型的非对称加密算法有RSA、DSA等。问题是如何保证加密用的接收者的公钥，即如何安全的传递公钥。</li>
</ul>

<h4 id="2https请求客户端和服务器都做了什么">2、HTTPS请求客户端和服务器都做了什么？</h4>
<ul>
  <li>1)客户端向服务器传输客户端的SSL协议版本号，支持的加密算法的种类，产生的随机数Key1及其他信息</li>
  <li>2)服务器在客户端发送过来的加密算法列表中选取一种，产生随机数Key2，然后发送给客户端，并将自己的公钥证书也发送给客户端</li>
  <li>3)客户端验证服务器的合法性，服务器的合法性包括：证书是否过期，发行服务器证书的CA是否可靠，发行者的公钥能否正确解开服务器证书的”发行者的数字签名”，服务器证书上的域名是否和服务器的实际域名相匹配，如果合法性验证没有通过，通信将断开，如果合法性验证通过，将继续向下进行；</li>
  <li>4)客户端随机产生一个随机数A/随机数B/随机数C（Pre-Master-Key），然后用服务器的公钥(从证书中获得)对其加密，然后将该Pre-Master-Key发送给服务器。</li>
  <li>5)服务器接收到随机数A/随机数B/随机数C（Pre-Master-Key），则使用协商好的算法(H)计算出真正的用户通信过程中使用的对称加密密钥Master-Key=H(C1+S1+PreMaster);</li>
  <li>6)至此为止，服务器和客户端之间都得到对称加密的密钥（Master-Key），之后的通信过程就使用Master-Key作为对称加密的密钥进行安全通信。<br />
<img src="http://files.pandaleo.cn/b3b7f9fe3297465b943d97b7e8526f04.png" alt="" /></li>
</ul>

<h4 id="3中间人攻击原理">3、中间人攻击原理</h4>
<ul>
  <li>
    <p>1)客户端向服务器传输客户端的SSL协议版本号，支持的加密算法的种类，产生的随机数Key1及其他信息，中间人进行拦截，替换成自己的信息，发送到服务器。</p>
  </li>
  <li>
    <p>2)服务器在客户端发送过来的加密算法列表中选取一种，产生随机数Key2，然后发送给客户端，并将自己的公钥证书也发送给客户端，中间人进行拦截，将自己的公钥证书替换后一并发送给客户端。</p>
  </li>
  <li>
    <p>3)客户端验证服务器的合法性，服务器的合法性包括：证书是否过期，发行服务器证书的CA是否可靠，发行者的公钥能否正确解开服务器证书的”发行者的数字签名”，服务器证书上的域名是否和服务器的实际域名相匹配，如果合法性验证没有通过，通信将断开，如果合法性验证通过，将继续向下进行；</p>
  </li>
  <li>
    <p>4)客户端随机产生一个随机数A/随机数B/随机数C（Pre-Master-Key），然后用服务器的公钥(从证书中获得)对其加密，然后将该Pre-Master-Key发送给服务器，中间人进行拦截，用自己的私钥进行解密，得到对称加密的密钥，同时用拦截到的服务器的公钥证书对对称加密的密钥进行加密，然后发送给服务器。</p>
  </li>
  <li>
    <p>5)服务器接收到随机数A/随机数B/随机数C（Pre-Master-Key），则使用协商好的算法(H)计算出真正的用户通信过程中使用的对称加密密钥Master-Key=H(C1+S1+PreMaster);</p>
  </li>
  <li>
    <p>6)至此为止，服务器、客户端、中间人之间都得到对称加密的密钥（Master-Key）；</p>
  </li>
</ul>

<h4 id="4如何保证数据的安全性httphttps">4、如何保证数据的安全性（HTTP、HTTPS）？</h4>
<p>由此可见，HTTP、HTTPS请求都是不安全的方式。既然我们无法防止被抓包，那么，只能在数据上进行加密，即使被抓到包，数据不被破解就好。每个公司有自己对应的加解密方式，以下提供一种方式：</p>
<ul>
  <li>1)通过时间戳方式： 将某个参数、时间戳按照一定顺序进行排列并在某个位置插入一定的字符串，然后用MD5进行加密，将其对为参数传递到服务器。</li>
</ul>
:ET