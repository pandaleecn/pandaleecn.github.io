I"<h3 id="1-特性">1. 特性</h3>
<ul>
  <li>Swift 既是一门高层级语言，又是一门低层级语言。
    <ul>
      <li>很容易创建高阶函数，如map和reduce。</li>
      <li>可直接编译为原生二进制可执行文件，性能与C代码程序媲美。</li>
      <li>兼顾高低层级，如：将数组通过闭包映射到另一个数组编译出汇编码，达到直接对连续内存循环的效果。</li>
    </ul>
  </li>
  <li>Swift是一门多范式的语言，面向对象、纯函数式、C类指针运算。
    <ul>
      <li>双刃剑。有更多可用选择，代码不会受限，也会陷入其他语言的险境。</li>
      <li>可使用大部分Objective-C功能，消息发送、运行时、KVO等。</li>
      <li>拥有泛型，协议、值类型、闭包等特性。</li>
    </ul>
  </li>
  <li>Swift十分灵活。鼓励从下向上的编程方式，方便编写通用可重用组件。</li>
  <li>Swift代码可以做到紧凑、精确，同时保持清晰。
    <ul>
      <li>类型推断</li>
      <li>移除分号/括号</li>
      <li>泛型和协议扩展，封装和复用。</li>
    </ul>
  </li>
  <li>Swfit在实践中总是安全的，除非有意破坏。
    <ul>
      <li>如C#中的终止方法finalizer，运行在垃圾回收线程上，不确定执行。Swift采用引用计数，终止方法deinit的调用可以确定和预测。</li>
      <li>数组越界抛出异常，而不是继续使用可能取到的错误值。</li>
      <li>对存在风险的方法提出警告，如使用UnsafeMutablePoint类型，在闭包返回ptr。</li>
    </ul>
  </li>
  <li>Swfit 是一门独断的语言，年轻、博客或文章资料有误，批判的验光审视和思考，警惕过时信息。</li>
  <li>Swift 在持续进化。</li>
</ul>
:ET