I"!D<h3 id="一-http超文本传输协议">一、 HTTP，超文本传输协议</h3>
<h4 id="1-请求响应报文">1. 请求/响应报文</h4>
<ul>
  <li>请求报文
<img src="http://files.pandaleo.cn/0eca23c66636aed2bcac6ff4008a5aae.png?imageMogr2/thumbnail/!68p" alt="" />
    <ul>
      <li>方法
        <ul>
          <li>日常：GET、POST
            <ul>
              <li>GET和POST区别？普通总结。
                <ul>
                  <li>GET请求参数以？分割拼接到URL后面，POST请求参数在Body里面</li>
                  <li>GET参数长度限制2048个字符，POST一般没有该限制</li>
                  <li>GET请求不安全，POST请求比较安全</li>
                </ul>
              </li>
              <li>从语义的角度总结。语义：协议定义规范，语法：具体实现路径。
                <ul>
                  <li>GET：获取资源
                    <ul>
                      <li>安全的</li>
                      <li>幂等的</li>
                      <li>可缓存的</li>
                    </ul>
                  </li>
                  <li>POST：处理资源
                    <ul>
                      <li>非安全的</li>
                      <li>非幂等的</li>
                      <li>不可缓存的</li>
                    </ul>
                  </li>
                  <li>安全性：不应该引起Server端的任何状态变化。GET、HEAD、OPTIONS。</li>
                  <li>幂等性：同一个请求方法执行多次和执行一次的效果完全相同。PUT、DELETE。</li>
                  <li>可缓存性：请求是否可以缓存。GET、HEAD。</li>
                </ul>
              </li>
            </ul>
          </li>
          <li>HEAD、PUT、DELETE、OPTIONS</li>
        </ul>
      </li>
      <li>URL：地址</li>
      <li>协议版本：v1.1</li>
      <li>CRLF：首部字段名，多个构成首部字段区域</li>
      <li>实体主题：Post有，Get五</li>
    </ul>
  </li>
  <li>响应报文
<img src="http://files.pandaleo.cn/add5b5a10bdfd848bf27a4a1f343c251.png?imageMogr2/thumbnail/!68p" alt="" />
    <ul>
      <li>状态码
        <ul>
          <li>1xx</li>
          <li>2xx，200响应成功</li>
          <li>3xx，301、302发生了网络重定向</li>
          <li>4xx，401、404，客户端发起的请求本身存在问题</li>
          <li>5xx，681、682，Server端存在异常</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="2-连接建立流程">2. 连接建立流程</h4>
<p><img src="http://files.pandaleo.cn/6e1cc04025f93707e9f73d5fbfb12ba3.png?imageMogr2/thumbnail/!68p" alt="" /></p>
<ul>
  <li>通过TCP的三次握手建立连接</li>
  <li>在连接上进行HTTP请求和响应的传递</li>
  <li>通过TCP的四次挥手释放连接</li>
</ul>

<h4 id="3-http的特点">3. HTTP的特点</h4>
<ul>
  <li>无连接
    <ul>
      <li>HTTP的持久连接
<img src="http://files.pandaleo.cn/f07302bca2b8524559deb1a0d0445c33.png?imageMogr2/thumbnail/!68p" alt="" />
        <ul>
          <li>HTTP提供持久连接方案为了进行连接复用，节省TCP连接的数量，提高连接效率。</li>
          <li>头部字段
            <ul>
              <li>Connection：keep-alive，客户端期许采用持久连接</li>
              <li>time：20，20s以内不会进行四次挥手关闭，20s以内可以复用TCP连接</li>
              <li>max：10，这条连接最多可以发生的HTTP请求/响应对</li>
            </ul>
          </li>
          <li>怎样判断一个请求是否结束？
            <ul>
              <li>Content-length：1024，响应报文头部字段，响应数据字节数到达Content-length，说明HTTP请求响应接收完毕，HTTP请求结束。</li>
              <li>chunked，结束时最后会有一个空的chunked。</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Charles抓包原理
        <ul>
          <li>中间人攻击，利用HTTP中间人攻击的漏洞实现的。<br />
<img src="http://files.pandaleo.cn/659fbdc3b8c419d8c6fe8b3055ea5fa7.png?imageMogr2/thumbnail/!68p" alt="" /><br />
当客户端发送HTTP请求时，由中间人Hold住，假冒客户端的身份，发送同样的请求给Server端。Server端返回同样的结果给中间人，再由中间人返回给客户端，中间人可以篡改客户端和Server段请求和返回的数据。</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>无状态
    <ul>
      <li>多次发送HTTP请求时，Server端不知道是否为同一个用户</li>
      <li>Cookie / Session</li>
    </ul>
  </li>
</ul>

<h3 id="二http与网络安全">二、HTTP与网络安全</h3>
<h4 id="1-https和http的区别">1. HTTPS和HTTP的区别</h4>
<ul>
  <li>HTTPS = HTTP + SSL/TLS
<img src="http://files.pandaleo.cn/abe5b2ee52d3d9d70b0b36472133dc99.png?imageMogr2/thumbnail/!68p" alt="" />
HTTPS是安全的HTTP，在传输层TCP和应用层HTTP之间，通过SSL/TLS协议保障</li>
</ul>

<h4 id="2-https连接建立流程">2. HTTPS连接建立流程</h4>
<p><img src="http://files.pandaleo.cn/58bd3b65e6c0a83fd226bb0c9bdf4048.png?imageMogr2/thumbnail/!68p" alt="" /></p>
<ul>
  <li>会话密钥 = random S + random C + 预主秘钥（对称加密）</li>
  <li>HTTPS使用的加密方式
    <ul>
      <li>连接建立过程使用非对称加密，非对称加密很耗时！加密和解密方式不一样，在连接建立时使用，后续使用对称加密，减少损耗。</li>
      <li>后续通信过程使用对称加密</li>
    </ul>
  </li>
  <li>非对称加密
<img src="http://files.pandaleo.cn/b705f78283abc6b37fff6e3f4b59314e.png?imageMogr2/thumbnail/!68p" alt="" />
加密用公钥，解密用私钥；加密用私钥，解密用公钥。两把钥匙不一样。</li>
  <li>对称加密
<img src="http://files.pandaleo.cn/d0c7410f80ed193520f60a1bd0842ca6.png?imageMogr2/thumbnail/!68p" alt="" />
用同一把对称密钥解密。不能保证绝对安全，密钥可能被中间人攻击劫持。</li>
</ul>

<h3 id="三tcp--udp">三、TCP / UDP</h3>
<h4 id="1-udp用户数据报协议">1. UDP（用户数据报协议）</h4>
<ul>
  <li>特点
    <ul>
      <li>无连接</li>
      <li>尽最大努力交付</li>
      <li>面向报文。<br />
  既不合并，也不拆分<br />
<img src="http://files.pandaleo.cn/14a5efb67ac22a4ae926f1bf764ad904.png?imageMogr2/thumbnail/!68p" alt="" /></li>
    </ul>
  </li>
  <li>功能
    <ul>
      <li>复用、分用
<img src="http://files.pandaleo.cn/9f710263bfe5d4ccbd8a70629844616b.png?imageMogr2/thumbnail/!68p" alt="" /></li>
      <li>差错检测<br />
<img src="http://files.pandaleo.cn/7d183d36c579a532e3b82a84dcaa02d3.png?imageMogr2/thumbnail/!68p" alt="" />
        <ul>
          <li>检验和位于8字节UDP首部末尾，当接收方接收到UDP数据时，采用同样的办法计算检验和，和传递来的检验和比对。</li>
          <li>IM即时通讯软件开发时，消息传递时刻借鉴UDP差错检测的策略。</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="2-tcp传输控制协议">2. TCP（传输控制协议）</h4>
<ul>
  <li>特点</li>
  <li>面向连接
    <ul>
      <li>
        <p>三次握手。数据传输开始之前，需要建立连接。
<img src="http://files.pandaleo.cn/06b739c454203e81ccf3c7e46928806a.png?imageMogr2/thumbnail/!68p" alt="" />
当SYN发送超时，如果没有三次握手，会直接建立连接。再次收到超时重传策略的SYN时，会建立两次TCP连接。</p>
      </li>
      <li>
        <p>四次挥手。数据传输结束之后，需要释放连接。
<img src="http://files.pandaleo.cn/1cbde76f277489286e81063b29977621.png?imageMogr2/thumbnail/!68p" alt="" />
TCP通道全双工，双方都可以进行发送和回复，所以需要双方关闭。</p>
      </li>
    </ul>
  </li>
  <li>可靠传输
    <ul>
      <li>无差错、不丢失、不重复、按序到达</li>
      <li>停止等待协议
        <ul>
          <li>无差错情况
<img src="http://files.pandaleo.cn/e09c7cad7bdc83a701683cd136ecfa1d.png?imageMogr2/thumbnail/!68p" alt="" /></li>
          <li>超时重传
<img src="http://files.pandaleo.cn/dd1ebf4ac034b254ab01cc6ab0e19b6f.png?imageMogr2/thumbnail/!68p" alt="" />
在客户端设置超时定时器，如果在规定时间内没有收到对应分组报文的确认，开启超时重传机制，进行报文的重传。
差错校验、不丢失</li>
          <li>确认丢失
<img src="http://files.pandaleo.cn/9b63cf51f870db210bd29fd5436e9164.png?imageMogr2/thumbnail/!68p" alt="" />
客户端确认报文丢失，客户端超时重传，服务端丢弃重传的报文，重传确认。</li>
          <li>确认迟到<br />
<img src="http://files.pandaleo.cn/a6fd3fda07f653d4601e683a830899b3.png?imageMogr2/thumbnail/!68p" alt="" /></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>面向字节流
<img src="http://files.pandaleo.cn/aa75fc8a7aa102e39073e8ad5398c4e0.png?imageMogr2/thumbnail/!68p" alt="" />
    <ul>
      <li>发送方和接收方都有缓冲区，发送方通过TCP连接通道传递给接收方。</li>
      <li>发送方发送数据到缓冲区时，具体发送字节由TCP自行控制划分。如：H56、H789。</li>
    </ul>
  </li>
  <li>流量控制
    <ul>
      <li>滑动窗口协议
<img src="http://files.pandaleo.cn/a4e93a9de8e55ad58c62a33ea653ba98.png?imageMogr2/thumbnail/!68p" alt="" />
        <ul>
          <li>描述：发送方为Server端，接收方为客户端，当我们继续发送数据时，可能由于接收方的接收缓存不够，如果发送方窗口过大会以很快的速率发送，需要接收窗口通过修改TCP首部中的窗口值调整发送方的发送速率。</li>
          <li>发送窗口前沿、后沿，发送窗口的最左边和最右边</li>
          <li>发送窗口后沿和最后发送的字节之间，是可以发送、尚未发送的字节</li>
          <li>发送窗口大小由发送缓存和接收方接收窗口的大小控制，接收方根据自己的处理能力，调整接收方的发送窗口，决定发送方的发送速率和大小。</li>
          <li>TCP报文首部中包含发送窗口和接收窗口大小的字段，通过修改值完成控制速率的目的</li>
          <li>首先提交按序到达的报文，接收窗口中的数据需要报文完整才会提交</li>
          <li>接收窗口大小受限于接收缓存，可以通过报文首部中的接收窗口值反向制约发送方发送窗口大小，控制发送速率。</li>
          <li>按序到达可通过字节序号进行控制</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>拥塞控制
    <ul>
      <li>慢开始、拥塞避免
<img src="http://files.pandaleo.cn/bd95edbcf09f3ba32dd9089b731c0203.png?imageMogr2/thumbnail/!68p" alt="" />
        <ul>
          <li>横轴：交互次数、轮询次数；纵轴：窗口值大小。</li>
          <li>开始先发送1个报文，如果不拥塞发送2个报文，继续指数型翻倍增长。</li>
          <li>当增长到窗口门限值时，采用假发增大的方式，调整为线性增长，进行拥塞避免。</li>
          <li>当产生网络拥塞时（连续3个报文都没有收到ACK），采用拥塞避免乘法减小测序，恢复到只发送1个报文，减少网络中发送报文数量，减小网络层压力，重启开始慢开始，将拥塞窗口降低一半。</li>
        </ul>
      </li>
      <li>快恢复、快重传
达到拥塞窗口时，回到某个门限值重新开始新的拥塞避免，不重新开始慢开始和之后的拥塞避免。</li>
    </ul>
  </li>
</ul>

<h3 id="四dns解析">四、DNS解析</h3>
<h4 id="1-什么是dns解析">1. 什么是DNS解析？</h4>
<ul>
  <li>域名到IP地址的映射，DNS解析请求采用UDP数据包，切明文</li>
</ul>

<h4 id="2-dns解析查询方式">2. DNS解析查询方式</h4>
<ul>
  <li>递归查询
“我去给你问一下”，域名服务器不知道域名对应服务器IP的域名时，会作为主问方询问别人，之后层层返回。
<img src="http://files.pandaleo.cn/b3bfc0ec408e21b1c7439415448097da.png?imageMogr2/thumbnail/!68p" alt="" /></li>
  <li>迭代查询
“我告诉你谁可能知道”，域名服务器告诉本地DNS谁可能知道
<img src="http://files.pandaleo.cn/fcbcd2721330b171a43a8fc26a2f03a5.png?imageMogr2/thumbnail/!68p" alt="" /></li>
</ul>

<h4 id="3-存在的常见问题">3. 存在的常见问题</h4>
<ul>
  <li>DNS劫持
<img src="http://files.pandaleo.cn/10025d3adbbcd8ba88d2bfa3f9d7758e.png?imageMogr2/thumbnail/!68p" alt="" />
    <ul>
      <li>客户端询问本地DNS服务器时，由于采用UDP明文传输，可能存在被窃听的风险。如果被钓鱼DNS劫持，可能会返回错误IP，访问错误的Server上的网站。</li>
      <li>DNS劫持和HTTP没有关系，建立在连接之前，使用UDP数据包，端口号53。</li>
      <li>解决方案
        <ul>
          <li>httpDNS
<img src="http://files.pandaleo.cn/5e8b9ee38290b8390044be190042835a.png?imageMogr2/thumbnail/!68p" alt="" />
<img src="http://files.pandaleo.cn/b4d08c3e1e818345fd14705abe50cc8f.png?imageMogr2/thumbnail/!68p" alt="" />
GET请求时，采用IP直连的方式请求HTTP DNS Server服务器，如：119.29.29.29，中国最大的DNS中介服务器，DNSPod。参数包含：dn需要解析的域名，ip客户端自身IP地址。客户端根据返回的IP地址进行后续网络请求访问，规避DNS劫持。</li>
          <li>长连接
<img src="http://files.pandaleo.cn/275399f39d470f168ce9e4e9ad2f630e.png?imageMogr2/thumbnail/!68p" alt="" />
在客户端和APIServer之间建立长连Sever（代理服务器），客户端和长连Sever建立TCP长连通道，通过内网专线进行http请求和响应。</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>NDS解析转发
<img src="http://files.pandaleo.cn/a9643d8ca6ded6eecea4f2257744cf13.png?imageMogr2/thumbnail/!68p" alt="" />
    <ul>
      <li>客户端请求时，运营商DNS服务器为了节省资源，请求其他DNS服务器，之后请求权威DNS。</li>
      <li>权威DNS中根据不同运营商请求，针对不同网络的流量分发，返回代理DNS对应的IP，出现跨网访问场景，造成请求缓慢的效率问题。</li>
    </ul>
  </li>
</ul>

<h3 id="五session--cookie">五、Session / Cookie</h3>

<h4 id="1-http协议无状态特点的补偿">1. HTTP协议无状态特点的补偿</h4>
<p><img src="http://files.pandaleo.cn/ddba3585526edf085a05213c24597ba7.png?imageMogr2/thumbnail/!68p" alt="" /></p>
<h4 id="2-cookie">2. Cookie</h4>
<ul>
  <li>主要用来记录用户状态，区分用户；状态保存在客户端。
<img src="http://files.pandaleo.cn/5b108da0d1233960bb0de975f576dd92.png?imageMogr2/thumbnail/!68p" alt="" /></li>
  <li>客户端发送的cookie在http请求报文的cookie首部字段中</li>
  <li>服务器端设置http响应报文的Set-Cookie首部字段</li>
  <li>修改Cookie方法
    <ul>
      <li>新cookie覆盖旧cookie</li>
      <li>覆盖规则：name、path、domain等需要与原cookie一致</li>
    </ul>
  </li>
  <li>删除Cookie
    <ul>
      <li>新cookie覆盖旧cookie</li>
      <li>覆盖规则和修改一样</li>
      <li>设置cookie的expires=过去的一个时间点，或者maxAge=0</li>
    </ul>
  </li>
  <li>保证Cookie的安全
    <ul>
      <li>对Cookie进行加密处理</li>
      <li>只在https上携带Cookie</li>
      <li>设置Cookie为httpOnly，防止跨站脚本攻击</li>
    </ul>
  </li>
</ul>

<h4 id="3-session">3. Session</h4>
<ul>
  <li>也是记录用户状态，区分用户的；状态存放在服务器端。</li>
  <li>工作流程
<img src="http://files.pandaleo.cn/2f924fa1614f170a40fd3c092362ac9a.png?imageMogr2/thumbnail/!68p" alt="" />
    <ul>
      <li>记录用户状态：如用户名、密码，通过用户状态生成SessionId。</li>
      <li>与Cookie的联系和区别
        <ul>
          <li>联系：依赖Set-Cookie和Cookie，请求和响应报文字段。</li>
          <li>区别：Cookie存储在客户端，Session存储在服务端。</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="六总结">六、总结</h4>
<h4 id="1-从语义上总结http中get和post方式">1. 从语义上总结http中GET和POST方式。</h4>
<ul>
  <li>安全性、幂等性、缓存性。</li>
</ul>

<h4 id="2-https链接建立流程">2. HTTPS链接建立流程。</h4>
<ul>
  <li>客户端发送到服务端支持的加密算法列表，包含tls版本号、随机数c；服务端返回证书，包含商定的加密算法。</li>
  <li>首先通过非对称加密进行对称加密的密钥传输，后续通过HTTP网络请求通过被非对称加密保护的对称加密进行网络王文。</li>
</ul>

<h4 id="3-tcp和udp的区别">3. TCP和UDP的区别。</h4>
<ul>
  <li>TCP面向连接，支持可靠连接，面向字节流，提供流量和拥塞控制。</li>
  <li>UDP无连接，只简单提供了复用、分用，差错检测，基本传输层功能。</li>
</ul>

<h4 id="4-tcp的慢开始过程">4. TCP的慢开始过程。</h4>
<ul>
  <li>TCP拥塞控制，慢开始拥塞算法。</li>
</ul>

<h4 id="5-客户端避免dns劫持方案">5. 客户端避免DNS劫持方案。</h4>
<ul>
  <li>httpDNS和长连接。</li>
</ul>
:ET