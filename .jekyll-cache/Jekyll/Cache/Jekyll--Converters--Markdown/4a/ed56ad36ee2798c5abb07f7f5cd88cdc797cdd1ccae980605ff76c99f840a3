I"	H<h3 id="一理论知识">一、理论知识</h3>
<p>蓝牙开发框架 Core Buletooth，可以与支持蓝牙 4.0 的第三方蓝交互，提供了与蓝牙设备进行通信所需要的协议和类。蓝牙4.0 一低功耗著称，所以也叫BLE（Bluetooth Low Energy），目前广泛应用于智能手环、智能嵌入式设备、智能家居等领域。</p>
<h4 id="1-重要的类与协议">1. 重要的类与协议</h4>
<ul>
  <li>CBCentral：中心设备,发起连接的是CBCentral</li>
  <li>CBCentralManager：中心设备管理者，类似定位中的CLLocationManager</li>
  <li>CBPeripheral：外围设备，被连接的设备是CBPeripheral</li>
  <li>CBService：外围设备的服务，每个外围设备都会提供很多服务</li>
  <li>CBCharacteristic：外围设备的特征，包含在每个服务里</li>
  <li>CBDescriptor：用于描述CBCharacteristic的信息或属性</li>
  <li>CBCentralManagerDelegate：CBCentralManager对象遵守的协议，用于监视外围设备的发现、连接和检索</li>
  <li>CBPeripheralDelegate：CBPeripheral对象遵守的协议，用于监视外围设备的服务和属性的发现、检索和交互<br />
<img src="http://files.pmpanda.com/ffe0b5b052ac49531cb5af12cfd256e9.png" alt="外围设备、服务和特征值的关系" /></li>
</ul>

<h4 id="2-两种开发模式">2. 两种开发模式</h4>
<ul>
  <li>中心模式：如下图左边所示，以App为中心，连接其他的外设进行通信;（常见开发模式）</li>
  <li>外设模式：如下图右边所示，使用手机作为外设，连接其他中心设备进行通信；<br />
<img src="http://files.pmpanda.com/4e18d8f279ebadc35dfec3d051fe3e58.png" alt="两种开发模式" /></li>
</ul>

<h4 id="3-中心模式的开发步骤">3. 中心模式的开发步骤</h4>
<ol>
  <li>创建CBCentralManager实例进行蓝牙管理</li>
  <li>搜索外围设备</li>
  <li>连接外围设备</li>
  <li>获得外围设备的服务</li>
  <li>获得服务的特征</li>
  <li>从外围设备读数据（读取或订阅）</li>
  <li>向外围设备写数据</li>
  <li>断开连接</li>
</ol>

<h4 id="4-注意事项">4. 注意事项</h4>
<ul>
  <li>不要对Core Bluetooth中的任何类进行子类化</li>
  <li>iOS 10以后需要在info.plist文件中加上NSBluetoothPeripheralUsageDescription</li>
</ul>

<h3 id="二corebluetooth-中常用方法">二、CoreBluetooth 中常用方法</h3>
<ul>
  <li>1.导入依赖库、声明委托、定义变量</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#import "ViewController.h"
#import &lt;CoreBluetooth/CoreBluetooth.h&gt;

#define mBLEName @"LDP"

@interface ViewController () &lt;CBCentralManagerDelegate, CBPeripheralDelegate&gt;
//手机设备
@property (nonatomic, strong) CBCentralManager *mCentral;
//外设设备
@property (nonatomic, strong) CBPeripheral *mPeripheral;
//特征值
@property (nonatomic, strong) CBCharacteristic *mCharacteristic;
//服务
@property (nonatomic, strong) CBService *mService;
//描述
@property (nonatomic, strong) CBDescriptor *mDescriptor;

@end
</code></pre></div></div>

<ul>
  <li>2.程序开始时初始化设备</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- (CBCentralManager *)mCentral
{
    if (!_mCentral) {
        _mCentral = [[CBCentralManager alloc] initWithDelegate:self
                                                         queue:dispatch_get_main_queue()
                                                       options:nil];
    }
    return _mCentral;
}

- (void)viewDidLoad
{
    [super viewDidLoad];

    //中心管理者初始化
    [self mCentral];
}
</code></pre></div></div>

<ul>
  <li>3.当程序退出时，断开连接</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- (void)viewDidDisappear:(BOOL)animated
{
    [super viewDidDisappear:animated];

    // 停止扫描
    if([self.mCentral isScanning]){
        NSLog(@"stopScan");
        [self.mCentral stopScan];
    }
    //停止连接
    if(nil != self.mPeripheral &amp;&amp; self.mPeripheral.state == CBPeripheralStateConnecting){
        NSLog(@"cancelPeripheralConnection");
        [self.mCentral cancelPeripheralConnection:self.mPeripheral];
    }
}
</code></pre></div></div>

<ul>
  <li>4.扫描外设</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//只要中心管理者初始化,就会触发此代理方法
- (void)centralManagerDidUpdateState:(CBCentralManager *)central
{
    switch (central.state) {
        case CBManagerStateUnknown:
            NSLog(@"CBManagerStateUnknown");
            break;
        case CBManagerStateResetting:
            NSLog(@"CBManagerStateResetting");
            break;
        case CBManagerStateUnsupported:
            NSLog(@"CBManagerStateUnsupported");
            break;
        case CBManagerStateUnauthorized:
            NSLog(@"CBManagerStateUnauthorized");
            break;
        case CBManagerStatePoweredOff:
            NSLog(@"CBManagerStatePoweredOff");
            break;
        case CBManagerStatePoweredOn:
        {
            NSLog(@"CBManagerStatePoweredOn");
            //搜索外设
            [self.mCentral scanForPeripheralsWithServices:nil // 通过某些服务筛选外设
                                                  options:nil]; // dict,条件
        }
            break;
        default:
            break;
    }
}
</code></pre></div></div>

<ul>
  <li>5.连接外设</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//发现外设后调用的方法
- (void)centralManager:(CBCentralManager *)central // 中心管理者
 didDiscoverPeripheral:(CBPeripheral *)peripheral // 外设
     advertisementData:(NSDictionary *)advertisementData // 外设携带的数据
                  RSSI:(NSNumber *)RSSI // 外设发出的蓝牙信号强度
{
    NSLog(@"搜索到设备名：%@，设备ID：%@",peripheral.name,peripheral.identifier);
    //(ABS(RSSI.integerValue) &gt; 35)
    //发现完之后就是进行连接
    if([peripheral.name isEqualToString:mBLEName]){
        self.mPeripheral = peripheral;
        self.mPeripheral.delegate = self;
        [self.mCentral connectPeripheral:peripheral options:nil];
    }
}
</code></pre></div></div>

<ul>
  <li>6.获取服务</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//中心管理者连接外设成功
- (void)centralManager:(CBCentralManager *)central // 中心管理者
  didConnectPeripheral:(CBPeripheral *)peripheral // 外设
{
    NSLog(@"设备连接成功，设备名：%@", peripheral.name);
    //7、外设发现服务,传nil代表不过滤
    [self.mPeripheral discoverServices:nil];
}

// 外设连接失败
- (void)centralManager:(CBCentralManager *)central didFailToConnectPeripheral:(CBPeripheral *)peripheral error:(NSError *)error
{
    NSLog(@"设备连接失败，设备名：%@", peripheral.name);
}

// 丢失连接
- (void)centralManager:(CBCentralManager *)central didDisconnectPeripheral:(CBPeripheral *)peripheral error:(NSError *)error
{
    NSLog(@"设备丢失连接，设备名：%@", peripheral.name);
}
</code></pre></div></div>

<ul>
  <li>7.获取服务中的特征</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//发现外设的服务后调用的方法
- (void)peripheral:(CBPeripheral *)peripheral didDiscoverServices:(NSError *)error
{
    // 是否获取失败
    if (error) {
        NSLog(@"设备获取服务失败，设备名：%@", peripheral.name);
        return;
    }
    for (CBService *service in peripheral.services) {
        self.mService = service;
        NSLog(@"设备获取服务成功，服务名：%@，服务UUID：%@，服务数量：%lu",service,service.UUID,peripheral.services.count);
        //外设发现特征
        [peripheral discoverCharacteristics:nil forService:service];
    }
}
</code></pre></div></div>

<ul>
  <li>8.获取特征中的值和描述</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//从服务中发现外设特征的时候调用的代理方法
- (void)peripheral:(CBPeripheral *)peripheral didDiscoverCharacteristicsForService:(CBService *)service error:(NSError *)error
{
    if(error){
        NSLog(@"设备获取特征失败，设备名：%@", peripheral.name);
        return;
    }
    /**
    CBCharacteristicPropertyRead                                                    = 0x02,
    CBCharacteristicPropertyWriteWithoutResponse                                    = 0x04,
    CBCharacteristicPropertyWrite                                                   = 0x08,
    CBCharacteristicPropertyNotify                                                  = 0x10,
     */
    for (CBCharacteristic *cha in service.characteristics) {
        if(cha.properties &amp; CBCharacteristicPropertyWrite){
            NSLog(@"CBCharacteristicPropertyWrite");
            NSLog(@"%lu",cha.properties &amp; CBCharacteristicPropertyWrite);
            self.mCharacteristic = cha;
        }else if(cha.properties &amp; CBCharacteristicPropertyWriteWithoutResponse){
            NSLog(@"CBCharacteristicPropertyWriteWithoutResponse");
        }else if(cha.properties &amp; CBCharacteristicPropertyRead){
            NSLog(@"CBCharacteristicPropertyRead");
        }else if(cha.properties &amp; CBCharacteristicPropertyNotify){
            NSLog(@"CBCharacteristicPropertyNotify");
        }else if(cha.properties &amp; CBCharacteristicPropertyIndicate){
            NSLog(@"CBCharacteristicPropertyIndicate");
        }
        NSLog(@"设备获取特征成功，服务名：%@，特征值名：%@，特征UUID：%@，特征数量：%lu",service,cha,cha.UUID,service.characteristics.count);
        //获取特征对应的描述 会回调didDiscoverDescriptorsForCharacteristic
        [peripheral discoverDescriptorsForCharacteristic:cha];
        //获取特征的值 会回调didUpdateValueForCharacteristic
        [peripheral readValueForCharacteristic:cha];
    }
    if(nil != self.mCharacteristic){
        //打开外设的通知，否则无法接受数据
        [peripheral setNotifyValue:YES forCharacteristic:self.mCharacteristic];
    }
}
</code></pre></div></div>

<ul>
  <li>9.读取特征中的值和描述</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//更新特征值的时候调用，可以理解为获取蓝牙发回的数据
- (void)peripheral:(CBPeripheral *)peripheral didUpdateValueForCharacteristic:(CBCharacteristic *)characteristic error:(NSError *)error
{
    NSString *value = [[NSString alloc] initWithData:characteristic.value encoding:NSASCIIStringEncoding];
    NSLog(@"特征名：%@，特征值：%@",characteristic,value);

    if([value isEqualToString:@"open"]){

    }else if([value isEqualToString:@"close"]){

    }
}
</code></pre></div></div>

<ul>
  <li>10.状态改变和发现描述</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//通知状态改变时调用
-(void)peripheral:(CBPeripheral *)peripheral didUpdateNotificationStateForCharacteristic:(CBCharacteristic *)characteristic error:(NSError *)error{
    if(error){
        NSLog(@"特征名：%@，改变通知状态失败",characteristic);
    }
    NSLog(@"特征名：%@，改变了通知状态",characteristic);
}

//发现外设的特征的描述数组
- (void)peripheral:(CBPeripheral *)peripheral didDiscoverDescriptorsForCharacteristic:(nonnull CBCharacteristic *)characteristic error:(nullable NSError *)error
{
    if(error){
        NSLog(@"设备获取描述失败，设备名：%@", peripheral.name);
        return;
    }
    for (CBDescriptor *descriptor in characteristic.descriptors) {
        self.mDescriptor = descriptor;
        [peripheral readValueForDescriptor:descriptor];
        NSLog(@"设备获取描述成功，描述名：%@",descriptor);
    }
}
</code></pre></div></div>

<ul>
  <li>11.发送数据</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//发送数据
-(void)sendDataToBLE:(NSString *)data{
    NSData* myData = [data dataUsingEncoding:NSUTF8StringEncoding];
    [self.mPeripheral writeValue:myData // 写入的数据
               forCharacteristic:self.mCharacteristic // 写给哪个特征
                            type:CBCharacteristicWriteWithResponse];// 通过此响应记录是否成功写入
}

-(void)peripheral:(CBPeripheral *)peripheral didWriteValueForCharacteristic:(CBCharacteristic *)characteristic error:(NSError *)error{
    NSLog(@"数据发送成功");
}Ó
</code></pre></div></div>

<h3 id="三crc8-校验">三、CRC8 校验</h3>
<p>CRC(Cyclic Redundancy Check)，即循环冗余校核，是一种根据网络数据包或电脑文件等数据产生简短固定位数校核码的快速算法，主要用来检测或校核数据传输或者保存后可能出现的错误。CRC利用除法及余数的原理，实现错误侦测的功能，具有原理清晰、实现简单等优点。
<a href="https://baike.baidu.com/item/CRC/15418674#viewPageContent">CRC百度百科</a></p>

<ul>
  <li>步骤一：CRC校验采用多项式的编码方法，设要发送的数据码有k位，则该数据码对应的多项式F(x)有k项，k的取值只能为0或1；</li>
  <li>步骤二：G(x)为发送端和接收端预先约好的生成多项式。G(x)的选取对校验效果起着关键的作用，使用较多的生成多项式G(x)有CRC－16、CRC－CCITT、CRC－32等；</li>
  <li>步骤三：R(x)为生成的r阶冗余码多项式，R(x)的项数比G(x)要少一项。R(x)的计算方法为：以F(x)作为被除数，先将F(x)乘x′即左移r位，再以G(x)作为除数作模2运算。</li>
  <li>步骤四：CRC校验算法中，一帧数据有n=k+r位，前k位为数据码，后r位为冗余码。由步骤三计算出R(x)后，把R(x)附在F(x)后面形成要传送的CRC数据，其格式为[F(x)，R(x)]。</li>
  <li>步骤五：接收端接收到的数据F′（x）根据模2除法对G(x)进行检验。</li>
  <li>步骤六：若F′（x）modG(x)结果为0，表明数据在传送过程中无差错，接收端就接收该数据；若F′（x）modG(x)结果不为0，则表明数据传送有错误，接收端丢弃该数据。
<img src="http://files.pmpanda.com/29f6ac347e9b375671e8d420d6a3363e.png" alt="" /></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#pragma mark--CRC8校验
+ (NSString *)crc8_maxin_byteCheckWithHexString:(NSString*)hexString {
    NSString * tempStr = hexString;
    NSArray *tempArray = [self getByteForString:hexString];
//    NSArray  * tempArray = [tempStr componentsSeparatedByString:@" "];//分隔符
    unsigned char testChars[(int)tempArray.count];
    for(int i=0;i&lt;tempArray.count;i++){
        NSString * string = tempArray[i];
        unsigned char fristChar = [self hexHighFromChar:[string characterAtIndex:0]];
        unsigned char lastChar  = [self hexLowFromChar:[string characterAtIndex:1]];
        unsigned char temp = fristChar+lastChar;
        testChars[i] = temp;
    }
    unsigned char res = [self crc8_maxin_checkWithChars:testChars length:(int)tempArray.count];
    return [NSString stringWithFormat:@"%x", res];
}

+(unsigned char)hexHighFromChar:(unsigned char) tempChar{
    unsigned char temp = 0x00;
    switch (tempChar) {
        case 'a':temp = 0xa0;break;
        case 'A':temp = 0xA0;break;
        case 'b':temp = 0xb0;break;
        case 'B':temp = 0xB0;break;
        case 'c':temp = 0xc0;break;
        case 'C':temp = 0xC0;break;
        case 'd':temp = 0xd0;break;
        case 'D':temp = 0xD0;break;
        case 'e':temp = 0xe0;break;
        case 'E':temp = 0xE0;break;
        case 'f':temp = 0xf0;break;
        case 'F':temp = 0xF0;break;
        case '1':temp = 0x10;break;
        case '2':temp = 0x20;break;
        case '3':temp = 0x30;break;
        case '4':temp = 0x40;break;
        case '5':temp = 0x50;break;
        case '6':temp = 0x60;break;
        case '7':temp = 0x70;break;
        case '8':temp = 0x80;break;
        case '9':temp = 0x90;break;
        default:temp = 0x00;break;
    }
    return temp;
}

+(unsigned char)hexLowFromChar:(unsigned char) tempChar{
    unsigned char temp = 0x00;
    switch (tempChar) {
            case 'a':temp = 0x0a;break;
            case 'A':temp = 0x0A;break;
            case 'b':temp = 0x0b;break;
            case 'B':temp = 0x0B;break;
            case 'c':temp = 0x0c;break;
            case 'C':temp = 0x0C;break;
            case 'd':temp = 0x0d;break;
            case 'D':temp = 0x0D;break;
            case 'e':temp = 0x0e;break;
            case 'E':temp = 0x0E;break;
            case 'f':temp = 0x0f;break;
            case 'F':temp = 0x0F;break;
            case '1':temp = 0x01;break;
            case '2':temp = 0x02;break;
            case '3':temp = 0x03;break;
        case '4':temp = 0x04;break;
            case '5':temp = 0x05;break;
            case '6':temp = 0x06;break;
            case '7':temp = 0x07;break;
            case '8':temp = 0x08;break;
            case '9':temp = 0x09;break;
            default:temp = 0x00;break;
            }
    return temp;

}

+(char)crc8_maxin_checkWithChars:(unsigned char *)chars length:(int)len{
    unsigned char i;
    unsigned char crc=0x00; /* 计算的初始crc值 */
    unsigned char *ptr = chars;
    while(len--){
        crc ^= *ptr++;
            for(i = 0;i &lt; 8;i++)
                {
                    if(crc &amp; 0x01){
                        crc = (crc &gt;&gt; 1) ^ 0x8C;
                    }else crc &gt;&gt;= 1;
                }

    }
    return crc;

}

+ (NSArray *)getByteForString:(NSString *)string {
    NSMutableArray *strArr = [NSMutableArray array];
    for (int i = 0; i &lt; string.length/2; i++) {
        NSString *str = [string substringWithRange:NSMakeRange(i * 2, 2)];
        [strArr addObject:str];

    }
    return [strArr copy];

}
</code></pre></div></div>
:ET