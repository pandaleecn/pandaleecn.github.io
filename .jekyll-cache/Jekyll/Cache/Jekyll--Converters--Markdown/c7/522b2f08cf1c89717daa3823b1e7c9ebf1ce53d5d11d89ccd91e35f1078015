I"\<h3 id="一unicode而非固定宽度">一、Unicode，而非固定宽度</h3>
<ul>
  <li>Unicode 是可变长格式，由编码单元组成 Unicode 标量，之后由标量组成字符。</li>
  <li>Unicode 数据可以被编码成不同宽度的编码单元，最普遍的有 8 比特 (UTF-8) 或者 16 比特 (UTF-16)。
UTF-8 向后兼容 8 比特的 ASCII，目前网上最流行的编码方式。Swift 分别用 UInt16 和 UInt8 来表示
(它们被赋予了 Unicode.UTF16.CodeUnit 和 Unicode.UTF8.CodeUnit 的类型别名)。</li>
  <li>Unicode 中的编码点 (code point) 在 Unicode 编码空间中是介于 0 到 0x10FFFF (也就是十进
制的 1,114,111) 之间的一个单一值。在这 110 万个数值里，现在只有大约 137,000 个在被使用中，
还有很多空间可以用来存放颜文字这样的东西。对于 UTF-32，一个编码点会占用一个编码单元。对于UTF-8
一个编码点会占用一至四个编码单元。起始的 256 个 Unicode 编码点和 Latin-1 中的字符是一致的。</li>
  <li>Unicode 标量和编码大体相同，除了在 0xD800–0xDFFF 之间范围里的 2,048 个“代理” (surrogate) 编码点，
用来标志 UTF-16 编码的开头和结尾。标量在 Swift 字符串字面量中以 “\u{xxxx}” 来表示，xxxx 为十六进制数组。
如：欧元符号 €，”\u{20AC}，对应类型是 Unicode.Scalar，对 UInt32 封装的类型。</li>
  <li>扩展字位簇：用户最终看到的字符的术语。单个编码单元对应 Unicode 标量时，需要 21 位编码系统，
通常向上取整到32位（UTF-32。但是宽度仍不固定：在标量组成字符时，Unicode 依旧是可变宽度格式，
扩展字位簇可能由多个编码点组合而成。</li>
  <li>标量形成字位簇的规则，决定字符文本的分段，如使用退格删除操作时，删除对应的字符簇。该字符簇可能
对应多个标量，每个标量在文本存储的内存中，也可能使用了可变数量的编码单元。Swift 字符簇由 Character
类型表示，可以对任意数量的标量编码，形成用户看到的字符。</li>
</ul>
:ET